"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withImageLoader = void 0;
const imageLoaderFileName = './image-loader.config.js';
const withImageLoader = (nextConfig) => {
    return Object.assign(Object.assign({}, nextConfig), { webpack: (config, option) => {
            if (option.webpack.version[0] === '5') {
                const nextAlias = config.resolve.alias['next'];
                config.resolve.alias['next'] = [
                    'next-image-loader/build',
                    ...(Array.isArray(nextAlias) ? nextAlias : [nextAlias])
                ];
            }
            else {
                config.resolve.alias['next/image'] = 'next-image-loader/build/image';
                delete config.resolve.alias['next'];
            }
            const originalEntry = config.entry;
            config.entry = () => __awaiter(void 0, void 0, void 0, function* () {
                const entries = yield originalEntry();
                if (entries['main.js'] &&
                    !entries['main.js'].includes(imageLoaderFileName)) {
                    entries['main.js'].unshift(imageLoaderFileName);
                }
                if (entries['pages/_document'] &&
                    !entries['pages/_document'].includes(imageLoaderFileName)) {
                    entries['pages/_document'].unshift(imageLoaderFileName);
                }
                return entries;
            });
            return nextConfig.webpack ? nextConfig.webpack(config, option) : config;
        } });
};
exports.withImageLoader = withImageLoader;
